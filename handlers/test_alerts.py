from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import time
import logging
import psutil
import multiprocessing
import asyncio
from monitoring.prometheus_metrics import ERROR_COUNTER, CPU_USAGE
from monitoring.decorators import track_request_latency
from config import TELEGRAM_ALERTS_CHANNEL_ID

def cpu_intensive_task():
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–≥—Ä—É–∂–∞–µ—Ç CPU"""
    start = time.time()
    while time.time() - start < 120:  # –†–∞–±–æ—Ç–∞–µ–º 2 –º–∏–Ω—É—Ç—ã
        # –ë–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        for _ in range(1000000):
            _ = 2 ** 16


logger = logging.getLogger(__name__)

router = Router()

async def is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return message.from_user.id == TELEGRAM_ADMIN_ID

@router.message(Command("test_errors"))
@track_request_latency(handler_name="test_errors")
async def test_errors(message: Message):
    if not await is_admin(message):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ HighErrorRate"""
    try:
        logger.info("Starting error test...")
        for i in range(100):
            ERROR_COUNTER.labels(error_type="test", shard="main").inc()
            if i % 20 == 0:
                logger.info(f"Generated {i} errors...")
        logger.info("Error test completed")
        await message.answer("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 100 –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞ HighErrorRate")
    except Exception as e:
        logger.error(f"Error in test_errors: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫: {e}")

@router.message(Command("test_cpu"))
@track_request_latency(handler_name="test_cpu")
async def test_cpu(message: Message):
    if not await is_admin(message):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ HighCPUUsage"""
    processes = []
    try:
        logger.info("Starting CPU test...")
        await message.answer("–ù–∞—á–∏–Ω–∞—é –Ω–∞–≥—Ä—É–∑–∫—É CPU –Ω–∞ 120 —Å–µ–∫—É–Ω–¥...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU
        num_processes = multiprocessing.cpu_count()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–¥—Ä–∞
        
        for _ in range(num_processes):
            p = multiprocessing.Process(target=cpu_intensive_task)
            p.start()
            processes.append(p)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–∞–≥—Ä—É–∑–∫—É
        start = time.time()
        while time.time() - start < 120:
            if int(time.time() - start) % 10 == 0:
                logger.info(f"CPU test running for {int(time.time() - start)} seconds...")
            await asyncio.sleep(1)
        
        logger.info("CPU test completed")
        await message.answer("–¢–µ—Å—Ç CPU –Ω–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"Error in test_cpu: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ CPU: {e}")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for p in processes:
            try:
                p.terminate()
                p.join(timeout=1)
            except Exception as e:
                logger.error(f"Error stopping process: {e}")

@router.message(Command("test_channel"))
async def test_channel(message: Message):
    if not await is_admin(message):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    try:
        await message.bot.send_message(
            chat_id=TELEGRAM_ALERTS_CHANNEL_ID,
            text="üîµ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n```\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–ª–µ—Ä—Ç–æ–≤\n```",
            parse_mode="Markdown"
        )
        await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@router.message(Command("check_metrics"))
async def check_metrics(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫"""
    try:
        from prometheus_client import REGISTRY

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        error_metrics = [m for m in REGISTRY.collect() if m.name == 'bot_errors_total']
        cpu_metrics = [m for m in REGISTRY.collect() if m.name == 'bot_cpu_usage_percent']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = [
            "üìà *–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:*",
            "```"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º CPU –º–µ—Ç—Ä–∏–∫–∏
        if cpu_metrics:
            for sample in cpu_metrics[0].samples:
                report.append(f"CPU Usage: {sample.value}%")
        else:
            report.append("CPU Usage: Not available")

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
        report.append("\nErrors:")
        if error_metrics:
            for sample in error_metrics[0].samples:
                labels = ', '.join(f"{k}={v}" for k, v in sample.labels.items())
                report.append(f"- [{labels}]: {sample.value}")
        else:
            report.append("- No errors recorded")
        
        report.append("```")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await message.answer("\n".join(report), parse_mode="Markdown")
        logger.info(f"Metrics checked: {len(error_metrics)} error metrics, {len(cpu_metrics)} CPU metrics")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç—Ä–∏–∫: {e}"
        logger.error(error_msg)
        await message.answer(error_msg)
