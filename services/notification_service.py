import json
import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime, timedelta
from nats.aio.client import Client as NATS
from nats.aio.errors import ErrTimeout, ErrNoServers
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup
from fluentogram import TranslatorHub
from keyboards.inline import get_new_alert_keyboard
from utils.format_helpers import format_crypto_price

logger = logging.getLogger(__name__)

class GlobalRateLimiter:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    def __init__(self, messages_per_second: int = 100):
        self.messages_per_second = messages_per_second
        self.message_timestamps = []
        self.lock = asyncio.Lock()

    async def can_send(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        async with self.lock:
            now = datetime.now()
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            self.message_timestamps = [
                ts for ts in self.message_timestamps 
                if now - ts < timedelta(seconds=1)
            ]
            
            if len(self.message_timestamps) >= self.messages_per_second:
                return False
                
            self.message_timestamps.append(now)
            return True

    async def wait_for_slot(self):
        """–û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        while not await self.can_send():
            await asyncio.sleep(0.1)

class NotificationService:
    def __init__(self, bot: Bot, translator_hub: TranslatorHub, nats_url: str = "nats://nats:4222"):
        self.bot = bot
        self.translator_hub = translator_hub
        self.nats = NATS()
        self.nats_url = nats_url
        self.user_rate_limit = 5  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._last_sent: Dict[int, datetime] = {}
        self.global_limiter = GlobalRateLimiter(100)  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç 25 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS"""
        try:
            await self.nats.connect(
                self.nats_url,
                reconnect_time_wait=1,
                max_reconnect_attempts=-1,  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                connect_timeout=20
            )
            logger.info("Connected to NATS")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JetStream
            self.js = self.nats.jetstream()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            try:
                await self.js.add_stream(name="ALERTS", subjects=["alerts.*"])
            except Exception as e:
                if not "stream name already in use" in str(e).lower():
                    raise
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.js.subscribe(
                "alerts.notifications",
                durable="notification_processors",
                queue="notification_processors",
                cb=self._notification_handler
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.js.subscribe(
                "alerts.delayed",
                durable="delayed_processors",
                queue="delayed_processors",
                cb=self._delayed_notification_handler
            )
            
            logger.info("Subscribed to notification queues")
            
        except ErrNoServers as e:
            logger.error(f"Could not connect to NATS: {e}")
            raise

    async def publish_alert_notification(self, 
                                    user_id: int, 
                                    currency: str,
                                    current_price: float,
                                    threshold: float,
                                    currency_type: str,
                                    condition_type: str,
                                    alert_id: int,
                                    currency_id: int,
                                    user_language: str = "ru",
                                    priority: str = "normal"):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ –≤ NATS"""
        try:
            i18n = self.translator_hub.get_translator_by_locale(user_language)
            direction = i18n.get("alert-price-above") if condition_type == 'above' else i18n.get("alert-price-below")
            
            message = (
                f"üîî {currency}\n" +
                i18n.get("alert-price") + f" {direction} {format_crypto_price(threshold)} {currency_type}\n" +
                i18n.get("alerts-current-price") + f" {format_crypto_price(current_price)} {currency_type}"
            )
            
            keyboard = get_new_alert_keyboard(i18n, alert_id, currency_id)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            keyboard_dict = {
                "inline_keyboard": [
                    [
                        {
                            "text": button.text,
                            "callback_data": button.callback_data
                        } for button in row
                    ] for row in keyboard.inline_keyboard
                ]
            }
            
            payload = {
                "user_id": user_id,
                "message": message,
                "keyboard": keyboard_dict,
                "priority": priority,
                "timestamp": datetime.utcnow().isoformat(),
                "retry_count": 0
            }
            
            subject = "alerts.notifications" if priority == "high" else "alerts.delayed"
            await self.js.publish(
                subject,
                json.dumps(payload).encode()
            )
        except Exception as e:
            logger.error(f"Error publishing alert notification: {e}")
            raise

    async def _can_send_to_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.now()
        last_sent = self._last_sent.get(user_id)
        if last_sent and (now - last_sent) < timedelta(seconds=1):
            return False
        self._last_sent[user_id] = now
        return True

    async def _notification_handler(self, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ NATS"""
        try:
            data = json.loads(msg.data.decode())
            user_id = data["user_id"]
            message = data["message"]
            keyboard = data.get("keyboard")
            retry_count = data.get("retry_count", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π rate limit
            await self.global_limiter.wait_for_slot()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not await self._can_send_to_user(user_id):
                if retry_count < 3:  # –º–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
                    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                    await asyncio.sleep(1)
                    data["retry_count"] = retry_count + 1
                    await self.nats.publish(
                        "alerts.delayed",
                        json.dumps(data).encode()
                    )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if keyboard:
                    # –°–æ–∑–¥–∞–µ–º InlineKeyboardMarkup –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    keyboard_markup = InlineKeyboardMarkup.model_validate(keyboard)
                    await self.bot.send_message(
                        user_id,
                        message,
                        reply_markup=keyboard_markup
                    )
                else:
                    await self.bot.send_message(user_id, message)
                    
                await msg.ack()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                logger.info(f"Successfully sent notification to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending message to user {user_id}: {e}")
                if retry_count < 3:  # –º–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
                    data["retry_count"] = retry_count + 1
                    await self.nats.publish(
                        "alerts.delayed",
                        json.dumps(data).encode()
                    )

        except Exception as e:
            logger.error(f"Error processing notification: {e}")

    async def _delayed_notification_handler(self, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            data = json.loads(msg.data.decode())
            await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await self.nats.publish(
                "alerts.notifications",
                json.dumps(data).encode()
            )
            await msg.ack()
        except Exception as e:
            logger.error(f"Error processing delayed notification: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å NATS"""
        try:
            await self.nats.drain()
            await self.nats.close()
        except Exception as e:
            logger.error(f"Error closing NATS connection: {e}")
