import json
import asyncio
import logging
from typing import Dict, Optional, Set
from datetime import datetime, timedelta
from nats.aio.client import Client as NATS
from nats.aio.errors import ErrTimeout, ErrNoServers
from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, Message
from fluentogram import TranslatorHub
from keyboards.inline import get_new_alert_keyboard
from utils.format_helpers import format_crypto_price
from utils.dialog_manager import deactivate_previous_dialogs, register_message

logger = logging.getLogger(__name__)

from .rate_limiter import TelegramRateLimiter

class NotificationService:
    def __init__(self, bot: Bot, translator_hub: TranslatorHub, nats_url: str = "nats://nats:4222"):
        self.bot = bot
        self.translator_hub = translator_hub
        self.nats = NATS()
        self.nats_url = nats_url
        self.rate_limiter = TelegramRateLimiter()
        self._processing_users: Set[int] = set()
        self._processing_lock = asyncio.Lock()

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS"""
        try:
            await self.nats.connect(
                self.nats_url,
                reconnect_time_wait=1,
                max_reconnect_attempts=60,
                connect_timeout=20
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.nats.subscribe(
                "alerts",
                cb=self._notification_handler
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.nats.subscribe(
                "alerts.high",
                cb=self._notification_handler
            )
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.nats.subscribe(
                "alerts.delayed",
                cb=self._delayed_notification_handler
            )
            
            logger.info("Successfully connected to NATS")
            
        except ErrNoServers as e:
            logger.error(f"Could not connect to NATS: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error connecting to NATS: {e}")
            raise

    async def publish_alert_notification(
        self, 
        user_id: int, 
        currency: str,
        current_price: float,
        threshold: float,
        currency_type: str,
        condition_type: str,
        alert_id: int,
        currency_id: int,
        user_language: str = "ru",
        priority: str = "normal"
    ):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–µ –≤ NATS"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            i18n = self.translator_hub.get_translator_by_locale(user_language)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            currency_symbol = 'RUB' if currency_type.upper() == 'RUB' else 'USD'
            direction = i18n.get("alert-price-above") if condition_type == 'above' else i18n.get("alert-price-below")
            message = (
                f"üîî {currency}\n"+
                i18n.get("alert-price")+f" {direction} {format_crypto_price(threshold)} {currency_symbol}\n"+
                i18n.get("alerts-current-price")+f" {format_crypto_price(current_price)} {currency_symbol}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_new_alert_keyboard(i18n, alert_id, currency_id)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            keyboard_dict = keyboard.model_dump() if keyboard else None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                "user_id": user_id,
                "message": message,
                "keyboard": keyboard_dict,
                "retry_count": 0
            }
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞–ª–µ—Ä—Ç–∞—Ö
            data['priority'] = 'high'
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ NATS
            json_data = json.dumps(data)
            logger.info(f"Publishing notification with data: {json_data}")
            
            await self.nats.publish(
                "alerts.high",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                json_data.encode()
            )
            
            logger.info(f"Published alert notification for user {user_id} to alerts queue")
            
        except Exception as e:
            logger.error(f"Error publishing notification: {e}")
            raise

    async def _can_send_to_user(self, user_id: int, priority: bool = False) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.rate_limiter.can_send(user_id, priority)

    async def _notification_handler(self, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ NATS"""
        user_id = None
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            data = json.loads(msg.data.decode())
            user_id = data["user_id"]
            message = data["message"]
            keyboard = data.get("keyboard")
            retry_count = data.get("retry_count", 0)
            priority = data.get("priority", "normal")
            is_priority = priority == "high"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            async with self._processing_lock:
                if user_id in self._processing_users:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    if retry_count < 3:
                        await asyncio.sleep(2)
                        data["retry_count"] = retry_count + 1
                        await self.nats.publish(
                            "alerts.delayed",
                            json.dumps(data).encode()
                        )
                    return
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._processing_users.add(user_id)

            try:
                # –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º rate limit
                can_send = await self.rate_limiter.wait_for_slot(user_id, is_priority)
                if not can_send:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ
                    if retry_count < 3:
                        await asyncio.sleep(1)
                        data["retry_count"] = retry_count + 1
                        await self.nats.publish(
                            "alerts.delayed",
                            json.dumps(data).encode()
                        )
                    return

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
                await deactivate_previous_dialogs(user_id, self.bot)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await self.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=keyboard if keyboard else None
                )
                register_message(user_id, sent_message.message_id)
                logger.info(f"Successfully sent notification {sent_message.message_id} to user {user_id}")

            except Exception as e:
                logger.error(f"Error sending notification to user {user_id}: {str(e)}")
                if retry_count < 3:
                    await asyncio.sleep(2)
                    data["retry_count"] = retry_count + 1
                    await self.nats.publish(
                        "alerts.delayed",
                        json.dumps(data).encode()
                    )

            finally:
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with self._processing_lock:
                    self._processing_users.remove(user_id)

        except Exception as e:
            logger.error(f"Critical error processing notification: {str(e)}")
            logger.error(f"Stacktrace: {traceback.format_exc()}")

    async def _delayed_notification_handler(self, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        await self._notification_handler(msg)

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å NATS"""
        try:
            await self.nats.close()
        except Exception as e:
            logger.error(f"Error closing NATS connection: {e}")
            raise
